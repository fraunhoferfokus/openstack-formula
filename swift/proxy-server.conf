[DEFAULT]
bind_port = {{ salt['pillar.get']('swift:ports:proxy', 8888) }}
user = {{ salt['pillar.get']('swift:user','swift') }}

[pipeline:main]
pipeline = healthcheck cache authtoken keystoneauth proxy-server

[app:proxy-server]
use = egg:swift#proxy
allow_account_management = true
account_autocreate = true

{% if salt['pillar.get']('swift:filter:keystone',False) %}
[filter:keystone]{% if salt['pillar.get']('swift:filter:keystone:use',False) %}
use = {{ salt['pillar.get']('swift:filter:keystone:use',False) }}{% endif %}{% if salt['pillar.get']('swift:filter:keystone:operator_roles',False) %}
operator_roles = {{ salt['pillar.get']('swift:filter:keystone:operator_roles',False) }}{% endif %}{% if salt['pillar.get']('swift:filter:keystone:is_admin',False) %}
cache = {{ salt['pillar.get']('swift:filter:keystone:is_admin',False) }}{% endif %}{% if salt['pillar.get']('swift:filter:keystone:cache',False) %}
cache = {{ salt['pillar.get']('swift:filter:keystone:cache',False) }}{% endif %}
{% endif %}

[filter:keystoneauth]
use = egg:swift#keystoneauth
operator_roles = Member,admin,swiftoperator

[filter:authtoken]{% if salt['pillar.get']('swift:keystone:filter_factory', False) %}
paste.filter_factory = {{ salt['pillar.get']('swift:keystone:filter_factory') }}{%else%}
paste.filter_factory = keystoneclient.middleware.auth_token:filter_factory {%endif%}

# Delaying the auth decision is required to support token-less
# usage for anonymous referrers ('.r:*').
delay_auth_decision = true

# cache directory for signing certificate
signing_dir = /home/swift/keystone-signing

# auth_* settings refer to the Keystone server
auth_protocol = {{ salt['pillar.get']('keystone:protocol','http') }}
auth_host = {{ salt['pillar.get']('keystone:host') }}
auth_port = {{ salt['pillar.get']('keystone:port', 35357) }}
{% if salt['pillar.get']('keystone:uri', False) %}
auth_uri = {{ salt['pillar.get']('keystone:uri') }}
{% elif salt['pillar.get']('keystone:protocol',False) %}
auth_uri = {{ salt['pillar.get']('keystone:protocol') }}://{{ salt['pillar.get']('keystone:host') }}:{{ salt['pillar.get']('keystone:port',35357) }}{% endif %}

# the same admin_token as provided in keystone.conf{% if salt['pillar.get']('keystone:admin_token',False) %}
admin_token = {{ salt['pillar.get']('keystone:admin_token') }}{% else %}
admin_token = {{ salt['pillar.get']('swift:keystone:admin_token') }}{% endif %}

# the service tenant and swift userid and password created in Keystone
admin_tenant_name = service
admin_user = {{ salt['pillar.get']('swift:keystone:user','swift') }}
admin_password = {{ salt['pillar.get']('swift:keystone:pass') }}

[filter:cache]
use = egg:swift#memcache

[filter:catch_errors]
use = egg:swift#catch_errors

[filter:healthcheck]
use = egg:swift#healthcheck

{% if salt['pillar.get']('swift:s3token',False) %}
[filter:s3token]{% if salt['pillar.get']('swift:s3token:filter_factory',False) %}
filter_factory = {{ salt['pillar.get']('swift:s3token:filter_factory') }}{% endif %}
auth_protocol = {{ salt['pillar.get']('keystone:protocol','http') }}
auth_host = {{ salt['pillar.get']('keystone:host') }}
auth_port = {{ salt['pillar.get']('keystone:port', 35357) }}
{% endif %}
