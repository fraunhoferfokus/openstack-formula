[DEFAULT]
{%- from 'openstack/defaults.jinja' import openstack_defaults %}
{%- from 'nova/defaults.jinja' import nova_defaults %}
{%- from 'common/macros.jinja' import keystone_authtoken %}
{%- from 'common/macros.jinja' import database_connection %}
{%- set get = salt['pillar.get'] %}
{%- set service = 'nova' %}
{%- set ctrl_or_localhost = get('openstack:controller:address_int', 
                        '127.0.0.1') %}
# Show more verbose log output (sets INFO log level output)
verbose = {{ get('nova:common:DEFAULT:verbose','False') }}

# Show debugging output in logs (sets DEBUG log level output)
debug = {{ get ('nova:common:DEFAULT:debug', False) }}

use_ipv6 = {{ get('openstack:use_ipv6', 
                openstack_defaults.use_ipv6) }}
my_ip = {{ get('nova:common:DEFAULT:my_ip', 
               ctrl_or_localhost) }}

rpc_backend = {{ get('nova:common:DEFAULT:rpc_backend',
                    get('openstack:rpc_backend',
                        openstack_defaults.rpc_backend)
                 ) }}
rabbit_host = {{ get('nova:common:DEFAULT:rabbit_host',
                    get('openstack:rabbitmq:host',
                        ctrl_or_localhost)
                 ) }}

logdir = /var/log/nova
state_path = /var/lib/nova
lock_path = /run/lock/nova

s3_host = {{ ctrl_or_localhost }}
ec2_host = {{ ctrl_or_localhost }}
ec2_dmz_host = {{ ctrl_or_localhost }}
cc_host = {{ ctrl_or_localhost }}

ec2_url = http://{{ ctrl_or_localhost }}:8773/services/Cloud
nova_url = {{ get('neutron:common:DEFAULT:nova_url', 'http://' + 
                    get('openstack:controller:address_int', '127.0.0.1') + ':' + 
                    get('openstack:nova:compute_port',
                        openstack_defaults.nova.compute_port|string + 
                        '/v1.1/')
               ) }}

api_paste_config = /etc/nova/api-paste.ini

root_helper = sudo nova-rootwrap /etc/nova/rootwrap.conf

resume_guests_state_on_host_boot = True
osapi_compute_listen = {{ salt['pillar.get'](
                            'nova:common:DEFAULT:osapi_compute_listen',
                            nova_defaults.osapi_compute_listen) }}
osapi_compute_listen_port = {{ salt['pillar.get'](
                                    'openstack:nova:compute_port', 
                                    openstack_defaults.nova.compute_port) }}
 
# Scheduler
# scheduler_driver = nova.scheduler.simple.SimpleScheduler
compute_scheduler_driver = nova.scheduler.filter_scheduler.FilterScheduler

# Metadata stuff
#metadata_listen = ::
{#- TODO #}
metadata_listen = {{ salt['pillar.get'](
                        'nova:common:DEFAULT:metadata_listen',
                        salt['pillar.get'](
                            'openstack:controller:address_ext',
                            '0.0.0.0')
                     ) }} 
{#- TODO #}
metadata_host = {{ salt['pillar.get'](
                        'nova:common:DEFAULT:metadata_listen',
                        salt['pillar.get'](
                            'openstack:controller:address_int',
                            '127.0.0.1')
                     ) }}
service_neutron_metadata_proxy = True
neutron_metadata_proxy_shared_secret = '{{ 
    get('openstack:neutron:shared_secret',
        openstack_defaults.neutron.shared_secret) }}'
 
# Auth
use_deprecated_auth = false
auth_strategy = {{ get('nova:common:DEFAULT:auth_strategy',
                        get('openstack:auth_strategy',
                            openstack_defaults.auth_strategy)
                   ) }}
keystone_ec2_url = http://{{ ctrl_or_localhost }}:5000/v2.0/ec2tokens
 
# Imaging service
glance_api_servers = {{ ctrl_or_localhost }}:9292
image_service = nova.image.glance.GlanceImageService
 
# INSTANCE DISK BACKEND
{#- TODO #}
libvirt_images_type = lvm
{#- TODO #}
libvirt_images_volume_group = nova-local
{#- TODO #}
libvirt_sparse_logical_volumes = false
 
# VNC configuration - Dual-Stacked - DISABLED, go for SPICE instead!
vnc_enabled = False
novnc_enabled = False
# novncproxy_base_url = http://{{ ctrl_or_localhost }}:6080/vnc_auto.html
# novncproxy_host = ::
# novncproxy_port = 6080
 
# NETWORK - NEUTRON
network_api_class = nova.network.neutronv2.api.API
neutron_url = http://{{ ctrl_or_localhost }}:9696/
{#- TODO - should fallback to the same thing as auth_strategy above: #}
neutron_auth_strategy = {{ get('nova:common:neutron_auth_strategy',
                                get('openstack:auth_strategy',
                                    openstack_defaults.auth_strategy)
                           ) }}
{#- TODO #}
neutron_admin_tenant_name = service
{#- TODO #}
neutron_admin_username = neutron
{#- TODO #}
neutron_admin_password = service_pass
{#- TODO #}
neutron_admin_auth_url = http://{{ ctrl_or_localhost }}:35357/v2.0/
linuxnet_interface_driver = nova.network.linux_net.LinuxOVSInterfaceDriver
firewall_driver = nova.virt.firewall.NoopFirewallDriver
security_group_api = neutron

# firewall_driver = nova.virt.libvirt.firewall.IptablesFirewallDriver

libvirt_vif_driver = nova.virt.libvirt.vif.LibvirtGenericVIFDriver
# libvirt_vif_driver = nova.virt.libvirt.vif.LibvirtHybridOVSBridgeDriver
# libvirt_vif_driver = nova.virt.libvirt.vif.LibvirtOpenVswitchVirtualPortDriver
 
# Cinder
volume_api_class = nova.volume.cinder.API
osapi_volume_listen_port = 5900

# SPICE configuration - Dual-Stacked
[spice]
enabled = True
spicehtml5proxy_host = ::
html5proxy_base_url = http://{{ ctrl_or_localhost }}:6082/spice_auto.html
keymap = en-us

[database]
{{ database_connection(get, service) }}

[keystone_authtoken]
{{ keystone_authtoken(get, service) }}
