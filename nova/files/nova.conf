[DEFAULT]
{%- from 'openstack/defaults.jinja' import openstack_defaults %}
{%- from 'nova/defaults.jinja' import nova_defaults %}
{%- from 'neutron/defaults.jinja' import neutron_defaults %}
{%- from 'openstack/macros.jinja' import keystone_authtoken %}
{%- from 'openstack/macros.jinja' import database_connection %}
{%- set get = salt['pillar.get'] %}
{%- set service = 'nova' %}
{# TODO: should get rid of this one: #}
{%- set ctrl_or_localhost = get('openstack:controller:address_int',
                        '127.0.0.1') %}
# Show more verbose log output (sets INFO log level output)
verbose = {{ get('nova:verbose','False') }}

# Show debugging output in logs (sets DEBUG log level output)
debug = {{ get ('nova:debug', False) }}

use_ipv6 = {{ get('openstack:use_ipv6',
                openstack_defaults.use_ipv6) }}
{#- Does the controller need this parameter?? #}
my_ip = {{ get('openstack:common:my_ip',
                salt['pillar.get']('openstack:controller:address_int',
                    'localhost')
        ) }}

rpc_backend = rabbit
rabbit_host = {{ get('nova:DEFAULT:rabbit_host',
                    get('openstack:rabbitmq:host',
                        get('openstack:controller:address_int')
                    )
                 ) }}
rabbit_userid={{ get('glance:api:DEFAULT:rabbit_userid',
                    get('glance:common:DEFAULT:rabbit_userid',
                        get('openstack:rabbitmq:userid',
                            openstack_defaults.rabbitmq.userid)
                    )
                 ) }}
rabbit_password='{{ get('glance:api:DEFAULT:rabbit_password',
                        get('glance:common:DEFAULT:rabbit_password',
                            get('openstack:rabbitmq:password',
                                openstack_defaults.rabbitmq.password)
                        )
                    ) }}'
rabbit_virtual_host={{ get('glance:api:DEFAULT:rabbit_virtual_host',
                            get('glance:common:DEFAULT:rabbit_virtual_host',
                                get('openstack:rabbitmq:virtual_host',
                                    openstack_defaults.rabbitmq.virtual_host)
                            )
                       ) }}

logdir = /var/log/nova
state_path = /var/lib/nova
lock_path = /run/lock/nova

s3_host = {{ ctrl_or_localhost }}
ec2_host = {{ ctrl_or_localhost }}
ec2_dmz_host = {{ ctrl_or_localhost }}
cc_host = {{ ctrl_or_localhost }}

ec2_url = http://{{ ctrl_or_localhost }}:8773/services/Cloud
nova_url = {{ get('neutron:DEFAULT:nova_url', 'http://' +
                    get('openstack:controller:address_int', '127.0.0.1') + ':' +
                    get('openstack:nova:compute_port',
                        openstack_defaults.nova.compute_port|string +
                        '/v1.1/')
               ) }}

api_paste_config = /etc/nova/api-paste.ini

root_helper = sudo nova-rootwrap /etc/nova/rootwrap.conf

resume_guests_state_on_host_boot = True
osapi_compute_listen = {{ salt['pillar.get'](
                            'nova:DEFAULT:osapi_compute_listen',
                            nova_defaults.osapi_compute_listen) }}
osapi_compute_listen_port = {{ salt['pillar.get'](
                                    'openstack:nova:compute_port',
                                    openstack_defaults.nova.compute_port) }}

# Scheduler
# scheduler_driver = nova.scheduler.simple.SimpleScheduler
compute_scheduler_driver = nova.scheduler.filter_scheduler.FilterScheduler

# Metadata stuff
#metadata_listen = ::
{#- TODO #}
metadata_listen = {{ salt['pillar.get'](
                        'nova:DEFAULT:metadata_listen',
                        salt['pillar.get'](
                            'openstack:controller:address_int',
                            '0.0.0.0')
                     ) }}
{#- TODO #}
metadata_host = {{ salt['pillar.get'](
                        'nova:DEFAULT:metadata_listen',
                        salt['pillar.get'](
                            'openstack:controller:address_int',
                            '127.0.0.1')
                     ) }}
service_neutron_metadata_proxy = True
neutron_metadata_proxy_shared_secret = '{{
    get('openstack:neutron:shared_secret',
        openstack_defaults.neutron.shared_secret) }}'

# Auth
use_deprecated_auth = false
auth_strategy = {{ get('nova:DEFAULT:auth_strategy',
                        get('openstack:auth_strategy',
                            openstack_defaults.auth_strategy)
                   ) }}
keystone_ec2_url = {{ 'http://{0}:{1}/v2.0/ec2tokens'.format(
    salt['pillar.get'](
        'openstack:keystone:host',
             salt['pillar.get'](
                 'openstack:controller:address_int')
    ),
    salt['pillar.get'](
             'openstack:keystone:public_port',
                openstack_defaults.keystone.public_port
    )
) }}

# Imaging service
glance_api_servers = {{ '{0}:{1}'.format(
                            salt['pillar.get'](
                                'openstack:controller:address_int',
                                'localhost'),
                            get('openstack:glance:api_port', 9292)
                        ) }}
image_service = nova.image.glance.GlanceImageService

# VNC configuration - Dual-Stacked - DISABLED, go for SPICE instead!
vnc_enabled = False
novnc_enabled = False
# novncproxy_base_url = http://{{ ctrl_or_localhost }}:6080/vnc_auto.html
# novncproxy_host = ::
# novncproxy_port = 6080

# NETWORK - NEUTRON
network_api_class = nova.network.neutronv2.api.API
neutron_url = http://{{ ctrl_or_localhost }}:9696/
neutron_auth_strategy = {{ get('nova:DEFAULT:neutron_auth_strategy',
                                get('openstack:auth_strategy',
                                    openstack_defaults.auth_strategy)
                           ) }}
{#- tenant_name and tenant_id are passed as contest
    from the nova.nova_conf state #}
{%- if 'openstack-controller' in pillar.get('roles', []) %}
neutron_admin_tenant_name = {{ tenant_name }}
    {%- if tenant_id %}
neutron_admin_tenant_id = {{ tenant_id }}
    {%- else %}
## tenant_id not yet available through salt-mine!
#neutron_admin_tenant_id =
    {%- endif %}
{%- endif %}
neutron_admin_username = '{{ get('nova:DEFAULT:neutron_admin_username',
                                get('neutron:common:keystone_authtoken:admin_user',
                                    'neutron')
                            ) }}'
{%- if get('neutron.password', False) %}
neutron_admin_password = '{{ get('neutron.password') }}'
{%- elif get('neutron:keystone_authtoken:admin_password', False) %}
neutron_admin_password = '{{ get(
    'neutron:keystone_authtoken:admin_password') }}'
{%- else %}
neutron_admin_password = '{{ get('nova:neutron_admin_password',
                                    nova_defaults.neutron_admin_password
                            ) }}'
{%- endif %}
{#- TODO #}
neutron_admin_auth_url = http://{{ ctrl_or_localhost }}:35357/v2.0/
neutron_region_name = {{
                        salt['pillar.get']('keystone.region',
                            salt['pillar.get']('openstack:region_name',
                                openstack_defaults.region_name)
                        ) }}
{#- TODO #}
linuxnet_interface_driver = nova.network.linux_net.LinuxOVSInterfaceDriver
## Nova doesn't need to implement the firewall when
## you're using Neutron for networking:
firewall_driver = nova.virt.firewall.NoopFirewallDriver
security_group_api = neutron

# firewall_driver = nova.virt.libvirt.firewall.IptablesFirewallDriver

{#- TODO #}
libvirt_vif_driver = nova.virt.libvirt.vif.LibvirtGenericVIFDriver
# libvirt_vif_driver = nova.virt.libvirt.vif.LibvirtHybridOVSBridgeDriver
# libvirt_vif_driver = nova.virt.libvirt.vif.LibvirtOpenVswitchVirtualPortDriver

# Cinder
volume_api_class = nova.volume.cinder.API
osapi_volume_listen_port = 5900

# SPICE configuration
[spice]
{#-
controller: spicehtml5proxy_host,
compute:    agent_enabled, server_listen, server_proxyclient_address
both:       enabled, html5proxy_base_url, keymap #}
enabled = True
keymap = en-us
html5proxy_base_url = {{ 'http://{0}:{1}/spice_auto.html'.format(
                            salt['pillar.get'](
                                'openstack:nova:spice_host',
                                salt['pillar.get'](
                                    'openstack:controller:address_ext')),
                            get('openstack:nova:spice_port', 6082)) }}
{%- if 'openstack-controller' in salt['pillar.get']('roles') %}
## controller-part of [spice]:
    {%- if get('openstack:nova:spice_host', False) %}
spicehtml5proxy_host = {{ get('openstack:nova:spice_host') }}
    {%- elif get('openstack:use_ipv6',
                    openstack_defaults.use_ipv6) %}
spicehtml5proxy_host = ::
    {%- else %}
spicehtml5proxy_host = 0.0.0.0
    {%- endif %}
{%- endif %}

{%- if 'openstack-compute' in salt['pillar.get']('roles') %}
## compute-part of [spice]:
agent_enabled = True
    {%- if get('openstack:use_ipv6', openstack_defaults.use_ipv6) %}
server_listen = ::
    {%- else %}
server_listen = 0.0.0.0
    {%- endif %}
server_proxyclient_address = {{ salt['pillar.get'](
        'openstack:common:my_ip') }}
{%- endif %}

[database]
{{ database_connection(get, service) }}

[keystone_authtoken]
{{ keystone_authtoken(get, service) }}
{%- if 'openstack-compute' in get('roles') %}
[libvirt]
  {%- set images_type = get('nova:libvirt:images_type',
                            get('nova:DEFAULT:libvirt_images_type',
                                nova_defaults.images_type)
                         ) %}
images_type = {{ images_type }}
  {%- if images_type == 'qcow2' %}
snapshot_compression = True
snapshot_image_format = qcow2
  {%- elif images_type == 'lvm' %}
images_volume_group = {{
    get('nova:libvirt:images_volume_group',
        get('nova:DEFAULT:libvirt_images_volume_group',
            nova_defaults.images_volume_group)
    ) }}
sparse_logical_volumes = {{
    get('nova:libvirt:sparse_logical_volumes',
        get('nova:DEFAULT:libvirt_sparse_logical_volumes',
            nova_defaults.libvirt_sparse_logical_volumes)
    ) }}
  {%- endif %}
{%- endif %}
